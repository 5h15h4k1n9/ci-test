name: Configure Git
description: Adds the necessary configurations to Git
inputs:
  tag-name:
    description: 'The name of the tag'
    required: false
    default: ${{ github.event.release.tag_name }}

runs:
  using: 'composite'
  steps:
    - name: Extract version from release tag
      shell: bash
      run: |
        if [[ ${{ inputs.tag-name }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          VERSION=${${{ inputs.tag-name }}:1}
        else
          VERSION=${${{ inputs.tag-name }}//-SNAPSHOT/}
        fi
        
        NEXT_MINOR_VERSION=$(echo "$VERSION" | awk -F. '{print $1"."$2+1".0"}')
        NEXT_PATCH_VERSION=$(echo "$VERSION" | awk -F. '{print $1"."$2"."$3+1}')
        PATCH_VERSION=$(echo "$VERSION" | awk -F. '{print $1"."$2}')
        
        {
          echo "VERSION=$VERSION";
          echo "NEXT_MINOR_VERSION=$NEXT_MINOR_VERSION";
          echo "NEXT_PATCH_VERSION=$NEXT_PATCH_VERSION";
          echo "PATCH_VERSION=$PATCH_VERSION";
        } >> "$GITHUB_ENV"

    - name: Validate version
      shell: bash
      run: |
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo -e "\n\e[31mInvalid version format: $VERSION\e[0m"
          exit 1
        fi

    - name: Log version
      shell: bash
      run: |
        echo -e "\n\e[32mVERSION=$VERSION\e[0m"
        echo -e "\e[32mNEXT_MINOR_VERSION=$NEXT_MINOR_VERSION\e[0m"
        echo -e "\e[32mNEXT_PATCH_VERSION=$NEXT_PATCH_VERSION\e[0m"
        echo -e "\n\e[32mPATCH_VERSION=$PATCH_VERSION\e[0m"