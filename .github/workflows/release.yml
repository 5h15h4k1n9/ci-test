name: Release Automation

on:
  release:
    types:
      - created

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

#      - name: Build
#        uses: ./.github/actions/execute-gradle
#        with:
#          gradle-commands: 'build'

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

#      - name: Test
#        uses: ./.github/actions/execute-gradle
#        with:
#          gradle-commands: 'test'

  publish-release:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        uses: ./.github/actions/configure-git
        with:
          user-name: ${{ secrets.USER_NAME }}
          user-mail: ${{ secrets.USER_MAIL }}

      - name: Extract versions
        uses: ./.github/actions/extract-version

      - name: Get branch
        uses: ./.github/actions/extract-branch

      - name: Update versions
        uses: ./.github/actions/update-versions
        with:
          user-token: ${{ secrets.USER_TOKEN }}


#      - name: Create branches
#        run: |
#          if [[ $BRANCH == "master" ]]; then
#            git checkout -b release/$VERSION
#            git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git release/$VERSION
#            sed -i "s/version = \"[0-9.]*\"/version = \"$VERSION\"/" build.gradle.kts
#            sed -i "s/ARG VERSION=[0-9.]*/ARG VERSION=$VERSION/" Dockerfile
#            if [[ $(git diff --quiet; echo $?) == 1 ]]; then
#                git add build.gradle.kts Dockerfile
#                git commit -m "release: $VERSION"
#                git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git release/$VERSION
#            fi
#
#            git checkout -b patch/$PATCH_BRANCH_NAME
#            sed -i "s/version = \"[0-9.]*\"/version = \"$PATCH_BRANCH_NAME-patch\"/" build.gradle.kts
#            sed -i "s/ARG VERSION=[0-9.]*/ARG VERSION=$PATCH_BRANCH_NAME-patch/" Dockerfile
#            if [[ $(git diff --quiet; echo $?) == 1 ]]; then
#              git add build.gradle.kts Dockerfile
#              git commit -m "patch: $PATCH_BRANCH_NAME"
#              git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git patch/$PATCH_BRANCH_NAME
#            fi
#
#            git checkout $BRANCH
#            sed -i "s/version = \"[0-9.]*\"/version = \"$MINOR_VERSION\"/" build.gradle.kts
#            sed -i "s/ARG VERSION=[0-9.]*/ARG VERSION=$MINOR_VERSION/" Dockerfile
#            if [[ $(git diff --quiet; echo $?) == 1 ]]; then
#              git add build.gradle.kts Dockerfile
#              git commit -m "feature: $MINOR_VERSION"
#              git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git $BRANCH
#            fi
#          else
#            git checkout -b release/$VERSION
#            sed -i "s/version = \"[0-9.]*[a-z\-]*\"/version = \"$VERSION\"/" build.gradle.kts
#            sed -i "s/ARG VERSION=[0-9.]*[a-z\-]*/ARG VERSION=$VERSION/" Dockerfile
#
#            if [[ $(git diff --quiet; echo $?) == 1 ]]; then
#              git add build.gradle.kts Dockerfile
#              git commit -m "release: $VERSION"
#              git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git release/$VERSION
#            fi
#          fi

#      - name: Login to DockerHub
#        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#
#      - name: Cache Docker layers
#        uses: actions/cache@v3
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-
#
#      - name: Build and push Docker image
#        run: |
#          docker build \
#            --tag ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:"$VERSION" \
#            -f Dockerfile .
#          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:"$VERSION"

  delete-release:
    needs:
      - build
      - test
      - publish-release
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Delete release
        uses: ./.github/actions/delete-release
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
