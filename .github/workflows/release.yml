name: Release Automation

on:
  release:
    types:
      - created

permissions:
  contents: write

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.build-and-test.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Build and test
        uses: ./.github/actions/build-and-test
        with:
          distribution: 'adopt-openj9'
          java-version: '17'
          architecture: 'x64'

  configure-git:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.configure-github.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure Git
        uses: ./.github/actions/configure-git
        with:
          user-name: ${{ secrets.USER_NAME }}
          user-mail: ${{ secrets.USER_MAIL }}

  extract-version:
    needs: configure-git
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.extract-version.outcome }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version
        uses: ./.github/actions/extract-version
        with:
          tag-name: ${{ github.event.release.tag_name }}

#  delete-release:
#    needs:
#      - build-and-test
#      - extract-version
#    runs-on: ubuntu-latest
#    if:  == 'failure' || needs.extract-version.outputs == 'failure'
#    steps:
#      - name: Delete release
#        run: |
#          git push --delete origin ${{ github.event.release.tag_name }}
#          gh release delete ${{ github.event.release.tag_name }} --yes
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  release:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#        with:
#          fetch-depth: 0
#
#      - name: Setup Git
#        run: |
#          git config --global user.name "${{ secrets.USER_NAME }}"
#          git config --global user.email "${{ secrets.USER_MAIL }}"
#
#      - name: Extract version from release tag
#        id: extract_version
#        run: |
#          TAG_NAME=${{ github.event.release.tag_name }}
#          VERSION=${TAG_NAME//-SNAPSHOT/}
#          echo "VERSION=$VERSION" >> $GITHUB_ENV
#          PATCH_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
#          echo "PATCH_VERSION=$PATCH_VERSION" >> $GITHUB_ENV
#
#      - name: Update version in build.gradle.kts
#        run: |
#          sed -i "s/version = \"[0-9.]*-SNAPSHOT\"/version = \"$VERSION\"/" build.gradle.kts
#
#      - name: Commit and push release version
#        run: |
#          git checkout -b release/$VERSION
#          git add build.gradle.kts
#          git commit -m "Release version $VERSION"
#          git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git release/$VERSION
#
#      - name: Create next snapshot branch
#        run: |
#          sed -i "s/version = \"[0-9.]*\"/version = \"$PATCH_VERSION-SNAPSHOT\"/" build.gradle.kts
#          git checkout -b develop/$PATCH_VERSION-SNAPSHOT
#          git add build.gradle.kts
#          git commit -m "Prepare for next development iteration $PATCH_VERSION-SNAPSHOT"
#          git push https://x-access-token:${{ secrets.USER_TOKEN }}@github.com/${{ github.repository }}.git develop/$PATCH_VERSION-SNAPSHOT
#